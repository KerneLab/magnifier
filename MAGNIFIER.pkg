CREATE OR REPLACE PACKAGE MAGNIFIER IS

	C_PARNSS         CONSTANT VARCHAR2(1) := '(';
	C_PARNST         CONSTANT VARCHAR2(1) := ')';
	C_QUOTE1         CONSTANT VARCHAR2(1) := '''';
	C_QUOTE1_PATTERN CONSTANT VARCHAR2(2) := C_QUOTE1 || '%';
	C_ESCAPE         CONSTANT VARCHAR2(2) := C_QUOTE1 || C_QUOTE1;
	C_QUOTE2         CONSTANT VARCHAR2(1) := '"';
	C_QUOTE2_PATTERN CONSTANT VARCHAR2(2) := C_QUOTE2 || '%';
	C_CMTBKS         CONSTANT VARCHAR2(2) := '/*';
	C_CMTBKS_PATTERN CONSTANT VARCHAR2(3) := C_CMTBKS || '%';
	C_CMTBKS_LENGTH  CONSTANT INTEGER := LENGTH(C_CMTBKS);
	C_CMTBKT         CONSTANT VARCHAR2(2) := '*/';
	C_CMTBKT_OFFSET  CONSTANT INTEGER := LENGTH(C_CMTBKT) - 1;
	C_CMTLNS         CONSTANT VARCHAR2(2) := '--';
	C_CMTLNS_PATTERN CONSTANT VARCHAR2(3) := C_CMTLNS || '%';
	C_CMTLNS_LENGTH  CONSTANT INTEGER := LENGTH(C_CMTLNS);
	C_CMTLNT         CONSTANT VARCHAR2(2) := CHR(13) || CHR(10);
	C_CMTLNT_PATTERN CONSTANT VARCHAR2(3) := C_CMTLNT || '%';
	C_CMTLNT_REGEXP  CONSTANT VARCHAR2(4) := '[' || C_CMTLNT || ']';

	FUNCTION DUAL_MATCH(P_SQL    IN CLOB,
											P_START  IN INTEGER,
											P_BOUND  IN VARCHAR2,
											P_ESCAPE IN VARCHAR2 DEFAULT NULL,
											P_LENESC IN INTEGER DEFAULT NULL) RETURN INTEGER;
	PRAGMA RESTRICT_REFERENCES(DUAL_MATCH, RNDS, WNDS);

	FUNCTION FIND_BOUND(P_SQL   IN CLOB,
											P_START IN INTEGER,
											P_END   IN INTEGER DEFAULT NULL) RETURN INTEGER;
	PRAGMA RESTRICT_REFERENCES(FIND_BOUND, RNDS, WNDS);

	FUNCTION NEXT_NON_WHITE(P_SQL IN CLOB, P_START IN INTEGER) RETURN INTEGER;
	PRAGMA RESTRICT_REFERENCES(NEXT_NON_WHITE, RNDS, WNDS);

	FUNCTION SPLIT_FRAGMENTS(P_SQL   IN CLOB,
													 P_START IN INTEGER DEFAULT 1,
													 P_LEVEL IN INTEGER DEFAULT 1) RETURN T_MGNF_FRAGS
		PIPELINED;
	PRAGMA RESTRICT_REFERENCES(SPLIT_FRAGMENTS, WNDS);

	PROCEDURE DEBUG(P_TEXT IN VARCHAR2, P_STEP IN VARCHAR2 DEFAULT NULL);
	PRAGMA RESTRICT_REFERENCES(DEBUG, RNDS, WNDS);

END MAGNIFIER;
/
CREATE OR REPLACE PACKAGE BODY MAGNIFIER IS

	FUNCTION DUAL_MATCH(P_SQL    IN CLOB,
											P_START  IN INTEGER,
											P_BOUND  IN VARCHAR2,
											P_ESCAPE IN VARCHAR2 DEFAULT NULL,
											P_LENESC IN INTEGER DEFAULT NULL) RETURN INTEGER
	
	 IS
	
		C_LENGTH CONSTANT INTEGER := LENGTH(P_SQL);
		C_LENESC CONSTANT INTEGER := NVL(P_LENESC, LENGTH(P_ESCAPE));
	
		V_INDEX INTEGER := P_START;
		V_FOUND INTEGER := 0;
	
	BEGIN
	
		IF P_SQL IS NOT NULL AND P_START IS NOT NULL AND P_BOUND IS NOT NULL THEN
		
			LOOP
			
				V_INDEX := V_INDEX + 1;
			
				EXIT WHEN V_INDEX > C_LENGTH;
			
				IF SUBSTR(P_SQL, V_INDEX, 1) = P_BOUND THEN
				
					IF P_ESCAPE IS NOT NULL THEN
					
						IF V_INDEX + C_LENESC - 1 <= C_LENGTH THEN
						
							IF C_LENESC > 0 AND
								 SUBSTR(P_SQL, V_INDEX, C_LENESC) = P_ESCAPE THEN
								V_INDEX := V_INDEX + C_LENESC - 1;
							ELSIF C_LENESC < 0 AND
										SUBSTR(P_SQL, V_INDEX + C_LENESC + 1, -C_LENESC) =
										P_ESCAPE THEN
								NULL;
							ELSE
								V_FOUND := V_INDEX;
								EXIT;
							END IF;
						
						END IF;
					ELSE
						V_FOUND := V_INDEX;
						EXIT;
					END IF;
				
				END IF;
			
			END LOOP;
		
		END IF;
	
		RETURN V_FOUND;
	
	END DUAL_MATCH;

	FUNCTION FIND_BOUND(P_SQL   IN CLOB,
											P_START IN INTEGER,
											P_END   IN INTEGER DEFAULT NULL) RETURN INTEGER IS
	
		C_START CONSTANT INTEGER := NVL(P_START, 1);
		C_END   CONSTANT INTEGER := NVL(P_END, LENGTH(P_SQL));
	
		V_INDEX INTEGER := C_START;
		V_TEMP  NVARCHAR2(2) := NULL;
	
	BEGIN
	
		IF P_SQL IS NOT NULL AND P_START IS NOT NULL /**/
			 AND V_INDEX BETWEEN 1 AND C_END THEN
		
			V_TEMP := SUBSTR(P_SQL, V_INDEX, 2);
		
			CASE
			
				WHEN V_TEMP LIKE C_QUOTE1_PATTERN THEN
					V_INDEX := DUAL_MATCH(P_SQL, V_INDEX, C_QUOTE1, C_ESCAPE);
				
				WHEN V_TEMP LIKE C_QUOTE2_PATTERN THEN
					V_INDEX := DUAL_MATCH(P_SQL, V_INDEX, C_QUOTE2);
				
				WHEN V_TEMP LIKE C_CMTBKS_PATTERN THEN
					V_INDEX := INSTR(P_SQL, C_CMTBKT, V_INDEX + C_CMTBKS_LENGTH);
					IF V_INDEX BETWEEN C_START AND C_END THEN
						V_INDEX := V_INDEX + C_CMTBKT_OFFSET;
					END IF;
				
				WHEN V_TEMP LIKE C_CMTLNS_PATTERN THEN
					V_INDEX := REGEXP_INSTR(P_SQL,
																	C_CMTLNT_REGEXP,
																	V_INDEX + C_CMTLNS_LENGTH);
				
				ELSE
					V_INDEX := REGEXP_INSTR(P_SQL, '\W', V_INDEX);
					IF V_INDEX > C_START THEN
						V_INDEX := V_INDEX - 1;
					END IF;
				
			END CASE;
		
		END IF;
	
		IF V_INDEX BETWEEN C_START AND C_END THEN
			RETURN V_INDEX;
		ELSE
			RETURN 0;
		END IF;
	
	END FIND_BOUND;

	FUNCTION NEXT_NON_WHITE(P_SQL IN CLOB, P_START IN INTEGER) RETURN INTEGER IS
	BEGIN
		RETURN REGEXP_INSTR(P_SQL, '\S', P_START);
	END NEXT_NON_WHITE;

	FUNCTION SPLIT_FRAGMENTS(P_SQL   IN CLOB,
													 P_START IN INTEGER DEFAULT 1,
													 P_LEVEL IN INTEGER DEFAULT 1) RETURN T_MGNF_FRAGS
		PIPELINED IS
	
		C_LENGTH CONSTANT INTEGER := LENGTH(P_SQL);
	
		V_NEXT  INTEGER := NVL(P_START, NEXT_NON_WHITE(P_SQL, 1));
		V_LAST  INTEGER := V_NEXT;
		V_LEVEL INTEGER := NVL(P_LEVEL, 1);
		V_TYPE  VARCHAR2(255) := NULL;
		V_FRAG  VARCHAR2(4000) := NULL;
	
	BEGIN
	
		IF P_SQL IS NOT NULL THEN
		
			LOOP
			
				EXIT WHEN V_LAST > C_LENGTH OR V_LAST <= 0;
			
				V_NEXT := FIND_BOUND(P_SQL, V_LAST);
			
				IF V_NEXT = 0 THEN
					V_NEXT := C_LENGTH + 1;
				END IF;
			
				V_FRAG := SUBSTR(P_SQL, V_LAST, GREATEST(V_NEXT - V_LAST + 1, 1));
			
				CASE
					WHEN UPPER(V_FRAG) IN ('SELECT',
																 'FROM',
																 'ON',
																 'WHERE',
																 'START',
																 'GROUP',
																 'HAVING',
																 'ORDER') THEN
						V_TYPE := UPPER(V_FRAG);
					WHEN V_FRAG = C_PARNST THEN
						V_LEVEL := V_LEVEL - 1;
					ELSE
						NULL;
				END CASE;
			
				PIPE ROW(T_MGNF_FRAG(V_LAST, V_NEXT, V_LEVEL, V_TYPE, V_FRAG));
			
				CASE V_FRAG
				
					WHEN C_PARNSS THEN
						FOR I IN (SELECT *
												FROM TABLE(MAGNIFIER.SPLIT_FRAGMENTS(P_SQL,
																														 NEXT_NON_WHITE(P_SQL,
																																						V_NEXT + 1),
																														 V_LEVEL + 1))) LOOP
							PIPE ROW(T_MGNF_FRAG(I.BEGIN_POS,
																	 I.END_POS,
																	 I.FRAG_LEVEL,
																	 I.FRAG_TYPE,
																	 I.FRAG_TEXT));
							V_NEXT := I.END_POS;
						END LOOP;
					
					WHEN C_PARNST THEN
						EXIT;
					
					ELSE
						NULL;
					
				END CASE;
			
				V_LAST := NEXT_NON_WHITE(P_SQL, V_NEXT + 1);
			
			END LOOP;
		
		END IF;
	
		RETURN;
	
	END SPLIT_FRAGMENTS;

	PROCEDURE DEBUG(P_TEXT IN VARCHAR2, P_STEP IN VARCHAR2 DEFAULT NULL) IS
	BEGIN
		DBMS_OUTPUT.PUT_LINE(CASE WHEN P_STEP IS NOT NULL THEN P_STEP || ':' ELSE ''
												 END || P_TEXT);
	END DEBUG;

END MAGNIFIER;
/
