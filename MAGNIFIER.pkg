CREATE OR REPLACE PACKAGE MAGNIFIER IS

	TYPE STR_LIST IS TABLE OF VARCHAR2(4000) NOT NULL;

	C_PARNSS         CONSTANT VARCHAR2(1) := '(';
	C_PARNST         CONSTANT VARCHAR2(1) := ')';
	C_QUOTE1         CONSTANT VARCHAR2(1) := '''';
	C_QUOTE1_PATTERN CONSTANT VARCHAR2(2) := C_QUOTE1 || '%';
	C_ESCAPE         CONSTANT VARCHAR2(2) := C_QUOTE1 || C_QUOTE1;
	C_QUOTE2         CONSTANT VARCHAR2(1) := '"';
	C_QUOTE2_PATTERN CONSTANT VARCHAR2(2) := C_QUOTE2 || '%';
	C_CMTBKS         CONSTANT VARCHAR2(2) := '/*';
	C_CMTBKS_PATTERN CONSTANT VARCHAR2(3) := C_CMTBKS || '%';
	C_CMTBKS_LENGTH  CONSTANT INTEGER := LENGTH(C_CMTBKS);
	C_CMTBKT         CONSTANT VARCHAR2(2) := '*/';
	C_CMTBKT_OFFSET  CONSTANT INTEGER := LENGTH(C_CMTBKT) - 1;
	C_CMTLNS         CONSTANT VARCHAR2(2) := '--';
	C_CMTLNS_PATTERN CONSTANT VARCHAR2(3) := C_CMTLNS || '%';
	C_CMTLNS_LENGTH  CONSTANT INTEGER := LENGTH(C_CMTLNS);
	C_CMTLNT         CONSTANT VARCHAR2(2) := CHR(13) || CHR(10);
	C_CMTLNT_PATTERN CONSTANT VARCHAR2(3) := C_CMTLNT || '%';
	C_CMTLNT_REGEXP  CONSTANT VARCHAR2(4) := '[' || C_CMTLNT || ']';

	C_LOGICAL  CONSTANT STR_LIST := STR_LIST('WHERE', 'HAVING', 'ON');
	C_KEYWORDS CONSTANT STR_LIST := STR_LIST('WITH',
																					 'INSERT',
																					 'VALUES',
																					 'SELECT',
																					 'UPDATE',
																					 'DELETE',
																					 'MERGE',
																					 'FROM',
																					 'INTO',
																					 'ON',
																					 'WHERE',
																					 'START',
																					 'GROUP',
																					 'HAVING',
																					 'UNION',
																					 'INTERSECT',
																					 'MINUS',
																					 'ORDER',
																					 'FOR',
																					 ';');

	FUNCTION DUAL_MATCH(P_SQL    IN CLOB,
											P_START  IN INTEGER,
											P_BOUND  IN VARCHAR2,
											P_ESCAPE IN VARCHAR2 DEFAULT NULL,
											P_LENESC IN INTEGER DEFAULT NULL) RETURN INTEGER;
	PRAGMA RESTRICT_REFERENCES(DUAL_MATCH, RNDS, WNDS);

	FUNCTION EXTRACT_LOGIC(P_SQL IN CLOB) RETURN T_MGNF_FRAGS
		PIPELINED;
	PRAGMA RESTRICT_REFERENCES(EXTRACT_LOGIC, WNDS);

	FUNCTION FIND_BOUND(P_SQL   IN CLOB,
											P_START IN INTEGER,
											P_END   IN INTEGER DEFAULT NULL) RETURN INTEGER;
	PRAGMA RESTRICT_REFERENCES(FIND_BOUND, RNDS, WNDS);

	FUNCTION NEXT_NON_WHITE(P_SQL IN CLOB, P_START IN INTEGER) RETURN INTEGER;
	PRAGMA RESTRICT_REFERENCES(NEXT_NON_WHITE, RNDS, WNDS);

	FUNCTION P(P_RUN_ID   IN INTEGER,
						 P_LOGIC_ID IN INTEGER,
						 P_SIGN_ID  IN NUMBER DEFAULT NULL,
						 P_LINE_ID  IN INTEGER DEFAULT 1,
						 P_PROGRAM  IN VARCHAR2 DEFAULT ' ') RETURN VARCHAR2 DETERMINISTIC;

	FUNCTION V(P_VALUE    IN NUMBER,
						 P_RUN_ID   IN INTEGER,
						 P_LOGIC_ID IN INTEGER,
						 P_SIGN_ID  IN NUMBER DEFAULT NULL,
						 P_LINE_ID  IN INTEGER DEFAULT 1,
						 P_PROGRAM  IN VARCHAR2 DEFAULT ' ') RETURN NUMBER DETERMINISTIC;

	FUNCTION V(P_VALUE    IN VARCHAR2,
						 P_RUN_ID   IN INTEGER,
						 P_LOGIC_ID IN INTEGER,
						 P_SIGN_ID  IN NUMBER DEFAULT NULL,
						 P_LINE_ID  IN INTEGER DEFAULT 1,
						 P_PROGRAM  IN VARCHAR2 DEFAULT ' ') RETURN VARCHAR2 DETERMINISTIC;

	FUNCTION V(P_VALUE    IN NVARCHAR2,
						 P_RUN_ID   IN INTEGER,
						 P_LOGIC_ID IN INTEGER,
						 P_SIGN_ID  IN NUMBER DEFAULT NULL,
						 P_LINE_ID  IN INTEGER DEFAULT 1,
						 P_PROGRAM  IN VARCHAR2 DEFAULT ' ') RETURN NVARCHAR2
		DETERMINISTIC;

	FUNCTION PILING(P_SQL IN CLOB, P_RUN_ID IN INTEGER) RETURN CLOB;

	FUNCTION SPLIT_FRAGMENTS(P_SQL   IN CLOB,
													 P_START IN INTEGER DEFAULT 1,
													 P_LEVEL IN INTEGER DEFAULT 1,
													 P_TYPE  IN VARCHAR2 DEFAULT NULL)
		RETURN T_MGNF_FRAGS
		PIPELINED;
	PRAGMA RESTRICT_REFERENCES(SPLIT_FRAGMENTS, WNDS);

	PROCEDURE TEST(P_SQL     IN CLOB,
								 P_RUN_ID  IN INTEGER DEFAULT 1,
								 P_LINE_ID IN INTEGER DEFAULT 1,
								 P_PROGRAM IN VARCHAR2 DEFAULT ' ');

	PROCEDURE DEBUG(P_TEXT IN VARCHAR2, P_STEP IN VARCHAR2 DEFAULT NULL);
	PRAGMA RESTRICT_REFERENCES(DEBUG, RNDS, WNDS);

END MAGNIFIER;
/
CREATE OR REPLACE PACKAGE BODY MAGNIFIER IS

	FUNCTION DUAL_MATCH(P_SQL    IN CLOB,
											P_START  IN INTEGER,
											P_BOUND  IN VARCHAR2,
											P_ESCAPE IN VARCHAR2 DEFAULT NULL,
											P_LENESC IN INTEGER DEFAULT NULL) RETURN INTEGER
	
	 IS
	
		C_LENGTH CONSTANT INTEGER := LENGTH(P_SQL);
		C_LENESC CONSTANT INTEGER := NVL(P_LENESC, LENGTH(P_ESCAPE));
	
		V_INDEX INTEGER := P_START;
		V_FOUND INTEGER := 0;
	
	BEGIN
	
		IF P_SQL IS NOT NULL AND P_START IS NOT NULL AND P_BOUND IS NOT NULL THEN
		
			LOOP
			
				V_INDEX := V_INDEX + 1;
			
				EXIT WHEN V_INDEX > C_LENGTH;
			
				IF SUBSTR(P_SQL, V_INDEX, 1) = P_BOUND THEN
				
					IF P_ESCAPE IS NOT NULL THEN
					
						IF V_INDEX + C_LENESC - 1 <= C_LENGTH THEN
						
							IF C_LENESC > 0 AND
								 SUBSTR(P_SQL, V_INDEX, C_LENESC) = P_ESCAPE THEN
								V_INDEX := V_INDEX + C_LENESC - 1;
							ELSIF C_LENESC < 0 AND
										SUBSTR(P_SQL, V_INDEX + C_LENESC + 1, -C_LENESC) =
										P_ESCAPE THEN
								NULL;
							ELSE
								V_FOUND := V_INDEX;
								EXIT;
							END IF;
						
						END IF;
					ELSE
						V_FOUND := V_INDEX;
						EXIT;
					END IF;
				
				END IF;
			
			END LOOP;
		
		END IF;
	
		RETURN V_FOUND;
	
	END DUAL_MATCH;

	FUNCTION EXTRACT_LOGIC(P_SQL IN CLOB) RETURN T_MGNF_FRAGS
		PIPELINED IS
	BEGIN
		FOR I IN (WITH VA AS
								 (SELECT V.*,
												LAG(V.FRAG_LEVEL, 1) OVER(ORDER BY NULL) LAST_LEVEL,
												LAG(V.FRAG_TYPE, 1) OVER(ORDER BY NULL) LAST_TYPE
									 FROM TABLE(MAGNIFIER.SPLIT_FRAGMENTS(P_SQL)) V),
								VB AS
								 (SELECT A.*,
												CASE
													WHEN A.FRAG_LEVEL != NVL(A.LAST_LEVEL, 0) THEN
													 A.BEGIN_POS
													ELSE
													 NULL
												END LEVEL_SHIFT
									 FROM VA A),
								VC AS
								 (SELECT B.BEGIN_POS,
												B.END_POS,
												B.FRAG_LEVEL,
												B.FRAG_TYPE,
												B.FRAG_TEXT,
												B.LEVEL_SHIFT,
												CASE
													WHEN B.FRAG_TYPE != NVL(B.LAST_TYPE, ' ') THEN
													 B.BEGIN_POS
													WHEN B.LEVEL_SHIFT IS NOT NULL THEN
													 B.LEVEL_SHIFT
													ELSE
													 NULL
												END SEG_SHIFT
									 FROM VB B),
								VD AS
								 (SELECT C.*,
												MAX(C.LEVEL_SHIFT) OVER(ORDER BY NULL ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) LEVEL_GROUP,
												MAX(C.SEG_SHIFT) OVER(ORDER BY NULL ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) SEG_GROUP,
												SUM(CASE
															WHEN C.FRAG_TYPE IN ('SELECT',
																									 'INSERT',
																									 'DELETE',
																									 'UPDATE',
																									 'MERGE') THEN
															 1
															ELSE
															 0
														END) OVER(PARTITION BY NULL) QUERY_DML
									 FROM VC C),
								VE AS
								 (SELECT D.BEGIN_POS,
												D.END_POS,
												D.FRAG_LEVEL,
												D.FRAG_TYPE,
												D.FRAG_TEXT,
												D.SEG_GROUP,
												CASE
													WHEN UPPER(D.FRAG_TEXT) IN
															 ('WHERE', 'ON', 'HAVING', 'AND', 'OR') THEN
													 D.BEGIN_POS
													ELSE
													 NULL
												END LOGIC_SHIFT
									 FROM VD D
									WHERE D.QUERY_DML > 0
										AND D.FRAG_TYPE IN ('WHERE', 'ON', 'HAVING')
										AND D.FRAG_TEXT NOT IN ('(', ')')),
								VF AS
								 (SELECT E.*,
												MAX(E.LOGIC_SHIFT) OVER(ORDER BY NULL ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) LOGIC_GROUP
									 FROM VE E)
								SELECT MIN(F.BEGIN_POS) BEGIN_POS,
											 MAX(F.END_POS) END_POS,
											 F.FRAG_LEVEL,
											 F.FRAG_TYPE
									FROM VF F
								 WHERE F.LOGIC_SHIFT IS NULL
								 GROUP BY F.LOGIC_GROUP, F.FRAG_LEVEL, F.FRAG_TYPE
								 ORDER BY F.LOGIC_GROUP) LOOP
		
			PIPE ROW(T_MGNF_FRAG(I.BEGIN_POS,
													 I.END_POS,
													 I.FRAG_LEVEL,
													 I.FRAG_TYPE,
													 SUBSTR(P_SQL,
																	I.BEGIN_POS,
																	I.END_POS - I.BEGIN_POS + 1)));
		
		END LOOP;
	
		RETURN;
	
	END EXTRACT_LOGIC;

	FUNCTION FIND_BOUND(P_SQL   IN CLOB,
											P_START IN INTEGER,
											P_END   IN INTEGER DEFAULT NULL) RETURN INTEGER IS
	
		C_START CONSTANT INTEGER := NVL(P_START, 1);
		C_END   CONSTANT INTEGER := NVL(P_END, LENGTH(P_SQL));
	
		V_INDEX INTEGER := C_START;
		V_TEMP  NVARCHAR2(2) := NULL;
	
	BEGIN
	
		IF P_SQL IS NOT NULL AND P_START IS NOT NULL /**/
			 AND V_INDEX BETWEEN 1 AND C_END THEN
		
			V_TEMP := SUBSTR(P_SQL, V_INDEX, 2);
		
			CASE
			
				WHEN V_TEMP LIKE C_QUOTE1_PATTERN THEN
					V_INDEX := DUAL_MATCH(P_SQL, V_INDEX, C_QUOTE1, C_ESCAPE);
				
				WHEN V_TEMP LIKE C_QUOTE2_PATTERN THEN
					V_INDEX := DUAL_MATCH(P_SQL, V_INDEX, C_QUOTE2);
				
				WHEN V_TEMP LIKE C_CMTBKS_PATTERN THEN
					V_INDEX := INSTR(P_SQL, C_CMTBKT, V_INDEX + C_CMTBKS_LENGTH);
					IF V_INDEX BETWEEN C_START AND C_END THEN
						V_INDEX := V_INDEX + C_CMTBKT_OFFSET;
					END IF;
				
				WHEN V_TEMP LIKE C_CMTLNS_PATTERN THEN
					V_INDEX := REGEXP_INSTR(P_SQL,
																	C_CMTLNT_REGEXP,
																	V_INDEX + C_CMTLNS_LENGTH);
				
				ELSE
					V_INDEX := REGEXP_INSTR(P_SQL, '\W', V_INDEX);
					IF V_INDEX > C_START THEN
						V_INDEX := V_INDEX - 1;
					END IF;
				
			END CASE;
		
		END IF;
	
		IF V_INDEX BETWEEN C_START AND C_END THEN
			RETURN V_INDEX;
		ELSE
			RETURN 0;
		END IF;
	
	END FIND_BOUND;

	FUNCTION NEXT_NON_WHITE(P_SQL IN CLOB, P_START IN INTEGER) RETURN INTEGER IS
	BEGIN
		RETURN REGEXP_INSTR(P_SQL, '\S', P_START);
	END NEXT_NON_WHITE;

	FUNCTION P(P_RUN_ID   IN INTEGER,
						 P_LOGIC_ID IN INTEGER,
						 P_SIGN_ID  IN NUMBER DEFAULT NULL,
						 P_LINE_ID  IN INTEGER DEFAULT 1,
						 P_PROGRAM  IN VARCHAR2 DEFAULT ' ') RETURN VARCHAR2 DETERMINISTIC IS
		PRAGMA AUTONOMOUS_TRANSACTION;
	BEGIN
		INSERT INTO MGNF_TEST_RECORDS
			(RUN_ID, USER_ID, PROGRAM, LINE_ID, SIGN_ID, LOGIC_ID, TEST_TM)
		VALUES
			(P_RUN_ID,
			 USER,
			 P_PROGRAM,
			 P_LINE_ID,
			 P_SIGN_ID,
			 P_LOGIC_ID,
			 SYSDATE);
		COMMIT;
		DEBUG(P_RUN_ID || ':' || /**/
					TRIM(P_PROGRAM) || /**/
					CASE WHEN P_LINE_ID IS NOT NULL THEN '#' ELSE ''
					END || P_LINE_ID || /**/
					CASE WHEN P_SIGN_ID IS NOT NULL THEN '(' ELSE ''
					END || P_SIGN_ID || /**/
					CASE WHEN P_SIGN_ID IS NOT NULL THEN ')' ELSE ''
					END || '@' || P_LOGIC_ID);
		RETURN NULL;
	END P;

	FUNCTION V(P_VALUE    IN NUMBER,
						 P_RUN_ID   IN INTEGER,
						 P_LOGIC_ID IN INTEGER,
						 P_SIGN_ID  IN NUMBER DEFAULT NULL,
						 P_LINE_ID  IN INTEGER DEFAULT 1,
						 P_PROGRAM  IN VARCHAR2 DEFAULT ' ') RETURN NUMBER DETERMINISTIC IS
	BEGIN
		IF MAGNIFIER.P(P_RUN_ID, P_LOGIC_ID, P_SIGN_ID, P_LINE_ID, P_PROGRAM) IS NULL THEN
			NULL;
		END IF;
		RETURN P_VALUE;
	END V;

	FUNCTION V(P_VALUE    IN VARCHAR2,
						 P_RUN_ID   IN INTEGER,
						 P_LOGIC_ID IN INTEGER,
						 P_SIGN_ID  IN NUMBER DEFAULT NULL,
						 P_LINE_ID  IN INTEGER DEFAULT 1,
						 P_PROGRAM  IN VARCHAR2 DEFAULT ' ') RETURN VARCHAR2 DETERMINISTIC IS
	BEGIN
		IF MAGNIFIER.P(P_RUN_ID, P_LOGIC_ID, P_SIGN_ID, P_LINE_ID, P_PROGRAM) IS NULL THEN
			NULL;
		END IF;
		RETURN P_VALUE;
	END V;

	FUNCTION V(P_VALUE    IN NVARCHAR2,
						 P_RUN_ID   IN INTEGER,
						 P_LOGIC_ID IN INTEGER,
						 P_SIGN_ID  IN NUMBER DEFAULT NULL,
						 P_LINE_ID  IN INTEGER DEFAULT 1,
						 P_PROGRAM  IN VARCHAR2 DEFAULT ' ') RETURN NVARCHAR2
		DETERMINISTIC IS
	BEGIN
		IF MAGNIFIER.P(P_RUN_ID, P_LOGIC_ID, P_SIGN_ID, P_LINE_ID, P_PROGRAM) IS NULL THEN
			NULL;
		END IF;
		RETURN P_VALUE;
	END V;

	FUNCTION PILING(P_SQL IN CLOB, P_RUN_ID IN INTEGER) RETURN CLOB IS
		C_SIGN CONSTANT NUMBER := DBMS_SQLTUNE.SQLTEXT_TO_SIGNATURE(P_SQL);
		V_SQL CLOB := NULL;
		V_POS INTEGER := 1;
	BEGIN
		FOR I IN (SELECT * FROM TABLE(MAGNIFIER.EXTRACT_LOGIC(P_SQL))) LOOP
		
			IF V_POS < I.BEGIN_POS THEN
				V_SQL := V_SQL || SUBSTR(P_SQL, V_POS, I.BEGIN_POS - V_POS);
			END IF;
		
			V_SQL := V_SQL ||
							 SUBSTR(P_SQL, I.BEGIN_POS, I.END_POS - I.BEGIN_POS + 1);
		
			V_SQL := V_SQL || ' AND MAGNIFIER.P(' || P_RUN_ID || ',' ||
							 I.BEGIN_POS || ',' || C_SIGN || ') IS NULL';
		
			V_POS := I.END_POS + 1;
		
		END LOOP;
	
		RETURN V_SQL;
	
	END PILING;

	FUNCTION SPLIT_FRAGMENTS(P_SQL   IN CLOB,
													 P_START IN INTEGER DEFAULT 1,
													 P_LEVEL IN INTEGER DEFAULT 1,
													 P_TYPE  IN VARCHAR2 DEFAULT NULL)
		RETURN T_MGNF_FRAGS
		PIPELINED IS
	
		C_LENGTH CONSTANT INTEGER := LENGTH(P_SQL);
	
		V_NEXT  INTEGER := NVL(P_START, NEXT_NON_WHITE(P_SQL, 1));
		V_LAST  INTEGER := V_NEXT;
		V_LEVEL INTEGER := NVL(P_LEVEL, 1);
		V_TYPE  VARCHAR2(255) := P_TYPE;
		V_FRAG  VARCHAR2(4000) := NULL;
	
	BEGIN
	
		IF P_SQL IS NOT NULL THEN
		
			LOOP
			
				EXIT WHEN V_LAST > C_LENGTH OR V_LAST <= 0;
			
				V_NEXT := FIND_BOUND(P_SQL, V_LAST);
			
				IF V_NEXT = 0 THEN
					V_NEXT := C_LENGTH + 1;
				END IF;
			
				V_FRAG := SUBSTR(P_SQL, V_LAST, GREATEST(V_NEXT - V_LAST + 1, 1));
			
				V_TYPE := CASE
										WHEN UPPER(V_FRAG) MEMBER OF C_KEYWORDS THEN
										 UPPER(V_FRAG)
										ELSE
										 V_TYPE
									END;
			
				CASE V_FRAG
				
					WHEN C_PARNSS THEN
					
						PIPE ROW(T_MGNF_FRAG(V_LAST,
																 LEAST(V_NEXT, C_LENGTH),
																 V_LEVEL,
																 V_TYPE,
																 V_FRAG));
					
						FOR I IN (SELECT *
												FROM TABLE(MAGNIFIER.SPLIT_FRAGMENTS(P_SQL,
																														 NEXT_NON_WHITE(P_SQL,
																																						V_NEXT + 1),
																														 V_LEVEL + 1,
																														 V_TYPE))) LOOP
							PIPE ROW(T_MGNF_FRAG(I.BEGIN_POS,
																	 I.END_POS,
																	 I.FRAG_LEVEL,
																	 I.FRAG_TYPE,
																	 I.FRAG_TEXT));
							V_NEXT := I.END_POS;
						END LOOP;
					
					WHEN C_PARNST THEN
						PIPE ROW(T_MGNF_FRAG(V_LAST,
																 LEAST(V_NEXT, C_LENGTH),
																 V_LEVEL - 1,
																 P_TYPE,
																 V_FRAG));
						EXIT;
					
					ELSE
						PIPE ROW(T_MGNF_FRAG(V_LAST,
																 LEAST(V_NEXT, C_LENGTH),
																 V_LEVEL,
																 V_TYPE,
																 V_FRAG));
					
				END CASE;
			
				V_LAST := NEXT_NON_WHITE(P_SQL, V_NEXT + 1);
			
			END LOOP;
		
		END IF;
	
		RETURN;
	
	END SPLIT_FRAGMENTS;

	PROCEDURE TEST(P_SQL     IN CLOB,
								 P_RUN_ID  IN INTEGER DEFAULT 1,
								 P_LINE_ID IN INTEGER DEFAULT 1,
								 P_PROGRAM IN VARCHAR2 DEFAULT ' ') IS
	
		C_SIGN CONSTANT NUMBER := DBMS_SQLTUNE.SQLTEXT_TO_SIGNATURE(P_SQL);
	
		V_SQL CLOB;
		V_CNT INTEGER;
	
	BEGIN
	
		DELETE FROM MGNF_LOGICAL_CLAUSES S
		 WHERE S.USER_ID = USER
			 AND S.PROGRAM = P_PROGRAM
			 AND S.LINE_ID = P_LINE_ID
			 AND S.SIGN_ID = C_SIGN;
	
		DELETE FROM MGNF_TEST_RECORDS R
		 WHERE R.USER_ID = USER
			 AND R.RUN_ID = P_RUN_ID;
	
		INSERT INTO MGNF_LOGICAL_CLAUSES
			(USER_ID, PROGRAM, LINE_ID, SIGN_ID, LOGIC_ID, LOGIC_END)
			SELECT USER, P_PROGRAM, P_LINE_ID, C_SIGN, L.BEGIN_POS, L.END_POS
				FROM TABLE(MAGNIFIER.EXTRACT_LOGIC(P_SQL)) L;
	
		COMMIT;
	
		V_SQL := MAGNIFIER.PILING(P_SQL, P_RUN_ID);
	
		DEBUG('SQL:' || V_SQL);
	
		BEGIN
			EXECUTE IMMEDIATE 'SELECT COUNT(1) FROM (' || V_SQL || ')'
				INTO V_CNT;
		EXCEPTION
			WHEN OTHERS THEN
				EXECUTE IMMEDIATE V_SQL;
				V_CNT := SQL%ROWCOUNT;
		END;
	
		DEBUG('Rows:' || V_CNT);
	
		RETURN;
	
	END TEST;

	PROCEDURE DEBUG(P_TEXT IN VARCHAR2, P_STEP IN VARCHAR2 DEFAULT NULL) IS
	BEGIN
		DBMS_OUTPUT.PUT_LINE(CASE WHEN P_STEP IS NOT NULL THEN P_STEP || ':' ELSE ''
												 END || P_TEXT);
	END DEBUG;

END MAGNIFIER;
/
